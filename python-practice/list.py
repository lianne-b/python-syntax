# -*- Encoding: utf-8 -*-

# 리스트와 리스트의 함수

# 리스트(list): 비슷한 성질을 가진 객체를 나열하는 자료형
# 객체(object): 파이썬에서 사용되는 모든 자료형
# 리스트 구조: 리스트명 = [요소1, 요소2, 요소3]
# 리스트명[몇 개의 데이터가 담길 것인지]
# 비슷한 성질, 즉 각각의 원소가 같은 자료형(예: 정수)일 때 리스트를 사용할 수 있다

# 리스트 vs 배열
# 파이썬은 배열(array)를 지원하지 않는다
# 배열은 정적 할당에 해당하며, 리스트는 동적 할당에 해당한다 (list --> dynamic array)
# 배열의 인덱스는 유일무이한 식별자인 반면, 리스트는 인덱스를 갖지만 이는 식별자의 개념이 아닌 몇 번째 데이터인지 정도를 의미한다
# 배열의 할당된 메모리 공간은 연속적인 반면, 리스트는 아이템들의 메모리 주소가 연속적일 수도 있고 아닐 수도 있다.


# 원하는 순서(인덱스)의 값에 바로 접근할 수 있다
a = [90.5, 90.3, 85.2, 93.0, 88.0, 55.9]
print("인덱스0 = ", a[0])
a[0] = 0.9
print("새 인덱스0 = ", a[0])

sum = 0
for i in a: # i: 리스트 내의 각 원소
    sum = sum + i
print("평균 점수: ", sum / len(a)) # len(): 배열 a의 길이를 구하는 함수


# 2차원 배열: 리스트의 원소로써 리스트가 들어가는 경우
b = [
    [90, 95, 40, 45, 66, 93, 91, 32, 95],
    [49, 93, 56, 67, 88, 87, 91, 94, 53],
    [69, 99, 84, 64, 76, 90, 93, 45, 45]
]
sum = 0
english = b[0]
for i in english:
    sum = sum + i
print("영어 평균 점수: ", sum / len(english))

sum = 0
math = b[1]
for i in math:
    sum = sum + i
print("수학 평균 점수: ", sum / len(math))


# 리스트의 함수
c = [10, 10, 10, 40, 50]
print("숫자 10의 개수: ", c.count(10)) # count(원소): 리스트 내 특정한 원소가 몇 개가 포함되어 있는지 반환

print("숫자 50의 인덱스: ", c.index(50)) # index(원소): 리스트 내 특정 원소의 인덱스 반환

c.append(20) # append(원소): 리스트의 뒤쪽에 새로운 원소를 삽입
print(c)

c.sort() # sort(): 리스트를 오름차순으로 정렬
print(c)

d = [20, 40, 60]
c.extend(d) # extend(리스트): 리스트의 뒤쪽에 다른 리스트를 삽입
print(c)

c.insert(4, 60) # insert(인덱스, 원소): 특정한 위치에 특정 원소를 삽입
print(c)

c.remove(10) # remove(원소): 리스트 내 특정 원소를 삭제 (첫 번째로 해당되는 원소만)
print(c)

c.pop(3)
print(c) # pop(인덱스): 리스트 내 특정 인덱스의 원소를 삭제

c.reverse() # reverse(): 리스트 순서를 뒤집는다
print(c)